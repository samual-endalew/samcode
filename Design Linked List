class ListNode:
    
    def __init__(self, val):
        self.val = val
        self.next = None
    
class MyLinkedList:

    def __init__(self):
        self.head = None
        self.size = 0

    def get(self, index: 'int') -> 'int':
        if index < 0 or index >= self.size or \
            self.head is None:
            return -1
        return self.findIndex(index).val
        
    def addAtHead(self, val: 'int') -> 'None':
        self.addAtIndex(0, val)
        
    def addAtTail(self, val: 'int') -> 'None':
        self.addAtIndex(self.size, val)
        
    def addAtIndex(self, index: 'int', val: 'int') -> 'None':
        if index > self.size:
            return -1
        elif index == 0:
            head = ListNode(val)
            head.next, self.head = self.head, head
        else:
            pre = self.findIndex(index-1)
            cur = ListNode(val)
            cur.next, pre.next = pre.next, cur
        self.size += 1
        
    def deleteAtIndex(self, index: 'int') -> 'None':
        if index < 0 or index >= self.size:
            return -1
        cur = self.findIndex(index-1)
        cur.next = cur.next.next
        self.size -= 1
        
    def findIndex(self, index: 'int') -> 'None':
        cur = self.head
        for _ in range(index):
            cur = cur.next
        return cur
